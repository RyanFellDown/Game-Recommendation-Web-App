{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./LibraryCSS/Saved.css';import PCLogo from'./Images/PCLogoTest.png';import axios from'axios';//This component returns all the games the user has saved to localStorage to respective HTML elements,\n//including the game name, steam search URL, image, and a button to remove the game.\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function SavedGames(){const[gameData,setGameData]=useState([]);//This function calls a google API to search for images of our requested game and return the image URL for us to use.\nconst fetchImage=async game=>{try{//We make our API call to google, giving it our game name (formatted for URLs) and returning an image.\nconst response=await axios.get(\"https://www.googleapis.com/customsearch/v1?key=AIzaSyA8yVgNiwh3Mf7OCHvcrQPL4ocikLadk1Y&num=1&searchType=image&start=1&cx=74bd649225d0f43ba&exactTerms=\".concat(game,\"&fileType=.PNG&imgSize=medium&alt=json\"));const data=response.data;const imageURL=data.items[0].link;console.log(\"The image URL is: \",imageURL);return imageURL;}catch(error){console.error(\"Couldn't retrieve the image...\");return PCLogo;}};//Using a useEffect to continuously load data from local storage and outputing that as our library data.\nuseEffect(()=>{const fetchGames=async()=>{var x=0;const LSList=[];//Here, we sort all the games in localStorage into an array.\nwhile(x<localStorage.length){//We don't want 'order' variable from localStorage displayed, so we only add other variables.\nif(localStorage.key(x)!=='order'){const gameName=localStorage.getItem(localStorage.key(x)).replace(/\"/g,'');LSList.push([localStorage.key(x),gameName]);}x=x+1;}//The sorted list is used to retrieve the games in numeric key order and therefore output them in order.\nLSList.sort();const gamePromise=LSList.map(async(LSGame,index)=>{//Here, we set the game name, the data for our link/API call, and the key each game is associated with.\nconst firstString=LSGame[1].toString();const plusGameName=firstString.replace(/ /g,\"+\");const linkData=\"https://store.steampowered.com/search/?term=\".concat(plusGameName);//Fetch the image from the API: if it finds an image, it's stored, otherwise, default image.\nconst imageURL=await fetchImage(plusGameName);//We then push the game name, image, URL, and key into an array, which is then used in setGameData.\nreturn{name:LSGame[1],image:imageURL,url:linkData,key:LSGame[0]};});//We set a variable to the returned array from the array mapping done in gamePromise, waiting for it to finish.\nconst toSetGameData=await Promise.all(gamePromise);setGameData(toSetGameData);};fetchGames();},[]);//This function handles the removal of a game, makeing sure to setGameData equal to all games\n//except the game with the key we are removing.\nconst handleRemove=index=>{localStorage.removeItem(index);console.log(\"Removed game was: \",index);setGameData(prevGame=>prevGame.filter(game=>game.key!==index));};return/*#__PURE__*/_jsx(\"div\",{children:gameData.length>0?gameData.map((game,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"InnerLibrary\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"LeftRow\",children:/*#__PURE__*/_jsx(\"img\",{id:\"gameImage\",src:game.image,onError:x=>x.target.src=PCLogo,alt:\"No Image...\"})}),/*#__PURE__*/_jsx(\"a\",{href:game.url,target:\"_blank\",rel:\"noopener noreferrer\",className:\"gameURLs\",children:game.name}),/*#__PURE__*/_jsx(\"button\",{id:\"removeGame\",onClick:()=>handleRemove(game.key)})]},index)):/*#__PURE__*/_jsx(\"div\",{className:\"OuterLibrary\",children:/*#__PURE__*/_jsx(\"p\",{children:\"No games are added to your library!\"})})});}export default SavedGames;","map":{"version":3,"names":["React","useState","useEffect","PCLogo","axios","jsx","_jsx","jsxs","_jsxs","SavedGames","gameData","setGameData","fetchImage","game","response","get","concat","data","imageURL","items","link","console","log","error","fetchGames","x","LSList","localStorage","length","key","gameName","getItem","replace","push","sort","gamePromise","map","LSGame","index","firstString","toString","plusGameName","linkData","name","image","url","toSetGameData","Promise","all","handleRemove","removeItem","prevGame","filter","children","className","id","src","onError","target","alt","href","rel","onClick"],"sources":["C:/Users/rfell/react-recommend-page/src/Library JS/SavedGames.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './LibraryCSS/Saved.css';\r\nimport PCLogo from './Images/PCLogoTest.png'\r\nimport axios from 'axios';\r\n\r\n\r\n//This component returns all the games the user has saved to localStorage to respective HTML elements,\r\n//including the game name, steam search URL, image, and a button to remove the game.\r\nfunction SavedGames() {\r\n  const [gameData, setGameData] = useState([]);\r\n\r\n  //This function calls a google API to search for images of our requested game and return the image URL for us to use.\r\n  const fetchImage = async (game) => {\r\n    try{\r\n      //We make our API call to google, giving it our game name (formatted for URLs) and returning an image.\r\n      const response = await axios.get(`https://www.googleapis.com/customsearch/v1?key=AIzaSyA8yVgNiwh3Mf7OCHvcrQPL4ocikLadk1Y&num=1&searchType=image&start=1&cx=74bd649225d0f43ba&exactTerms=${game}&fileType=.PNG&imgSize=medium&alt=json`)\r\n      const data = response.data;\r\n      const imageURL = data.items[0].link;\r\n\r\n      console.log(\"The image URL is: \", imageURL);\r\n      return imageURL;\r\n    }\r\n    catch(error){\r\n      console.error(\"Couldn't retrieve the image...\");\r\n      return PCLogo;\r\n    }\r\n  }\r\n\r\n\r\n  //Using a useEffect to continuously load data from local storage and outputing that as our library data.\r\n  useEffect(() => {\r\n    const fetchGames = async () => {\r\n      var x = 0;\r\n      const LSList = [];\r\n      \r\n      //Here, we sort all the games in localStorage into an array.\r\n      while (x<localStorage.length){\r\n        //We don't want 'order' variable from localStorage displayed, so we only add other variables.\r\n        if(localStorage.key(x) !== 'order'){\r\n          const gameName = localStorage.getItem(localStorage.key(x)).replace(/\"/g, '');\r\n          LSList.push([localStorage.key(x), gameName])\r\n        }\r\n        x = x+1;\r\n      }\r\n      //The sorted list is used to retrieve the games in numeric key order and therefore output them in order.\r\n      LSList.sort();\r\n\r\n      const gamePromise = LSList.map(async(LSGame, index) => {\r\n        //Here, we set the game name, the data for our link/API call, and the key each game is associated with.\r\n        const firstString = LSGame[1].toString();\r\n        const plusGameName = firstString.replace(/ /g, \"+\");\r\n        const linkData = `https://store.steampowered.com/search/?term=${plusGameName}`;\r\n\r\n        //Fetch the image from the API: if it finds an image, it's stored, otherwise, default image.\r\n        const imageURL = await fetchImage(plusGameName);\r\n          \r\n        //We then push the game name, image, URL, and key into an array, which is then used in setGameData.\r\n        return {name: LSGame[1], image: imageURL, url: linkData, key: LSGame[0]};\r\n      })\r\n\r\n      //We set a variable to the returned array from the array mapping done in gamePromise, waiting for it to finish.\r\n      const toSetGameData = await Promise.all(gamePromise);\r\n      setGameData(toSetGameData);\r\n    }\r\n\r\n    fetchGames();\r\n  }, []);\r\n\r\n  //This function handles the removal of a game, makeing sure to setGameData equal to all games\r\n  //except the game with the key we are removing.\r\n  const handleRemove = (index) => {\r\n    localStorage.removeItem(index);\r\n    console.log(\"Removed game was: \", index);\r\n    setGameData((prevGame) => prevGame.filter((game) => game.key !== index));\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      {gameData.length > 0 ? (\r\n        gameData.map((game, index) => (\r\n          <div key={index} className='InnerLibrary'>\r\n            <div className='LeftRow'>\r\n              <img id=\"gameImage\" src={game.image} onError={(x) => x.target.src = PCLogo} alt=\"No Image...\"></img>\r\n            </div>\r\n            <a href={game.url} target=\"_blank\" rel=\"noopener noreferrer\" className='gameURLs'>\r\n              {game.name}\r\n            </a>\r\n            <button id=\"removeGame\" onClick = {() => handleRemove(game.key)} />\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <div className='OuterLibrary'>\r\n          <p>No games are added to your library!</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SavedGames;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,wBAAwB,CAC/B,MAAO,CAAAC,MAAM,KAAM,yBAAyB,CAC5C,MAAO,CAAAC,KAAK,KAAM,OAAO,CAGzB;AACA;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,QAAS,CAAAC,UAAUA,CAAA,CAAG,CACpB,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGV,QAAQ,CAAC,EAAE,CAAC,CAE5C;AACA,KAAM,CAAAW,UAAU,CAAG,KAAO,CAAAC,IAAI,EAAK,CACjC,GAAG,CACD;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAV,KAAK,CAACW,GAAG,0JAAAC,MAAA,CAA0JH,IAAI,0CAAwC,CAAC,CACvO,KAAM,CAAAI,IAAI,CAAGH,QAAQ,CAACG,IAAI,CAC1B,KAAM,CAAAC,QAAQ,CAAGD,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAEnCC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEJ,QAAQ,CAAC,CAC3C,MAAO,CAAAA,QAAQ,CACjB,CACA,MAAMK,KAAK,CAAC,CACVF,OAAO,CAACE,KAAK,CAAC,gCAAgC,CAAC,CAC/C,MAAO,CAAApB,MAAM,CACf,CACF,CAAC,CAGD;AACAD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAsB,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAI,CAAAC,CAAC,CAAG,CAAC,CACT,KAAM,CAAAC,MAAM,CAAG,EAAE,CAEjB;AACA,MAAOD,CAAC,CAACE,YAAY,CAACC,MAAM,CAAC,CAC3B;AACA,GAAGD,YAAY,CAACE,GAAG,CAACJ,CAAC,CAAC,GAAK,OAAO,CAAC,CACjC,KAAM,CAAAK,QAAQ,CAAGH,YAAY,CAACI,OAAO,CAACJ,YAAY,CAACE,GAAG,CAACJ,CAAC,CAAC,CAAC,CAACO,OAAO,CAAC,IAAI,CAAE,EAAE,CAAC,CAC5EN,MAAM,CAACO,IAAI,CAAC,CAACN,YAAY,CAACE,GAAG,CAACJ,CAAC,CAAC,CAAEK,QAAQ,CAAC,CAAC,CAC9C,CACAL,CAAC,CAAGA,CAAC,CAAC,CAAC,CACT,CACA;AACAC,MAAM,CAACQ,IAAI,CAAC,CAAC,CAEb,KAAM,CAAAC,WAAW,CAAGT,MAAM,CAACU,GAAG,CAAC,MAAMC,MAAM,CAAEC,KAAK,GAAK,CACrD;AACA,KAAM,CAAAC,WAAW,CAAGF,MAAM,CAAC,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC,CACxC,KAAM,CAAAC,YAAY,CAAGF,WAAW,CAACP,OAAO,CAAC,IAAI,CAAE,GAAG,CAAC,CACnD,KAAM,CAAAU,QAAQ,gDAAA1B,MAAA,CAAkDyB,YAAY,CAAE,CAE9E;AACA,KAAM,CAAAvB,QAAQ,CAAG,KAAM,CAAAN,UAAU,CAAC6B,YAAY,CAAC,CAE/C;AACA,MAAO,CAACE,IAAI,CAAEN,MAAM,CAAC,CAAC,CAAC,CAAEO,KAAK,CAAE1B,QAAQ,CAAE2B,GAAG,CAAEH,QAAQ,CAAEb,GAAG,CAAEQ,MAAM,CAAC,CAAC,CAAC,CAAC,CAC1E,CAAC,CAAC,CAEF;AACA,KAAM,CAAAS,aAAa,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAACb,WAAW,CAAC,CACpDxB,WAAW,CAACmC,aAAa,CAAC,CAC5B,CAAC,CAEDtB,UAAU,CAAC,CAAC,CACd,CAAC,CAAE,EAAE,CAAC,CAEN;AACA;AACA,KAAM,CAAAyB,YAAY,CAAIX,KAAK,EAAK,CAC9BX,YAAY,CAACuB,UAAU,CAACZ,KAAK,CAAC,CAC9BjB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEgB,KAAK,CAAC,CACxC3B,WAAW,CAAEwC,QAAQ,EAAKA,QAAQ,CAACC,MAAM,CAAEvC,IAAI,EAAKA,IAAI,CAACgB,GAAG,GAAKS,KAAK,CAAC,CAAC,CAC1E,CAAC,CAGD,mBACEhC,IAAA,QAAA+C,QAAA,CACG3C,QAAQ,CAACkB,MAAM,CAAG,CAAC,CAClBlB,QAAQ,CAAC0B,GAAG,CAAC,CAACvB,IAAI,CAAEyB,KAAK,gBACvB9B,KAAA,QAAiB8C,SAAS,CAAC,cAAc,CAAAD,QAAA,eACvC/C,IAAA,QAAKgD,SAAS,CAAC,SAAS,CAAAD,QAAA,cACtB/C,IAAA,QAAKiD,EAAE,CAAC,WAAW,CAACC,GAAG,CAAE3C,IAAI,CAAC+B,KAAM,CAACa,OAAO,CAAGhC,CAAC,EAAKA,CAAC,CAACiC,MAAM,CAACF,GAAG,CAAGrD,MAAO,CAACwD,GAAG,CAAC,aAAa,CAAM,CAAC,CACjG,CAAC,cACNrD,IAAA,MAAGsD,IAAI,CAAE/C,IAAI,CAACgC,GAAI,CAACa,MAAM,CAAC,QAAQ,CAACG,GAAG,CAAC,qBAAqB,CAACP,SAAS,CAAC,UAAU,CAAAD,QAAA,CAC9ExC,IAAI,CAAC8B,IAAI,CACT,CAAC,cACJrC,IAAA,WAAQiD,EAAE,CAAC,YAAY,CAACO,OAAO,CAAIA,CAAA,GAAMb,YAAY,CAACpC,IAAI,CAACgB,GAAG,CAAE,CAAE,CAAC,GAP3DS,KAQL,CACN,CAAC,cAEFhC,IAAA,QAAKgD,SAAS,CAAC,cAAc,CAAAD,QAAA,cAC3B/C,IAAA,MAAA+C,QAAA,CAAG,qCAAmC,CAAG,CAAC,CACvC,CACN,CACE,CAAC,CAEV,CAEA,cAAe,CAAA5C,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}