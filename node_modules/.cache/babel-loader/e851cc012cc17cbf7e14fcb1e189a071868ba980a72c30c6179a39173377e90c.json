{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rfell\\\\react-recommend-page\\\\src\\\\Library JS\\\\SavedGames.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './LibraryCSS/Saved.css';\nimport PCLogo from './Images/PCLogoTest.png';\nimport axios from 'axios';\nimport { json } from 'react-router-dom';\n\n//This component returns all the games the user has saved to localStorage to respective HTML elements,\n//including the game name, steam search URL, image, and a button to remove the game.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SavedGames() {\n  _s();\n  const [gameData, setGameData] = useState([]);\n  const [jsonData, setJsonData] = useState([]);\n\n  //This function calls a google API to search for images of our requested game and return the image URL for us to use.\n  const fetchImage = async game => {\n    try {\n      //We make our API call to google, giving it our game name (formatted for URLs) and returning an image.\n      const response = await axios.get(`https://www.googleapis.com/customsearch/v1?key=AIzaSyA8yVgNiwh3Mf7OCHvcrQPL4ocikLadk1Y&num=1&searchType=image&start=1&cx=74bd649225d0f43ba&exactTerms=${game}&fileType=.PNG&imgSize=medium&alt=json`);\n      const data = response.data;\n      const imageURL = data.items[0].link;\n      console.log(\"The image URL is: \", imageURL);\n      return imageURL;\n    } catch (error) {\n      console.error(\"Couldn't retrieve the image...\");\n      return PCLogo;\n    }\n  };\n\n  //Using a useEffect to continuously load data from local storage and outputing that as our library data.\n  useEffect(() => {\n    const fetchGames = async () => {\n      var x = 0;\n      const LSList = [];\n\n      //Here, we sort all the games in localStorage into an array.\n      while (x < localStorage.length) {\n        localStorage.key(x);\n        const gameName = localStorage.getItem(localStorage.key(x)).replace(/\"/g, '');\n        LSList.push([localStorage.key(x), gameName]);\n        x = x + 1;\n      }\n      LSList.sort();\n\n      //The sorted list is used to retrieve the games in numeric key order and therefore output them in order.\n      const libraryGames = [];\n      const gamePromise = LSList.map(async (LSGame, index) => {\n        //Here, we set the game name, the data for our link/API call, and the key each game is associated with.\n        const firstString = LSGame[0].toString();\n        const plusGameName = firstString.replace(/ /g, \"+\");\n        const linkData = `https://store.steampowered.com/search/?term=${plusGameName}`;\n\n        //Fetch the image from the API: if it finds an image, it's stored, otherwise, default image.\n        const imageURL = await fetchImage(plusGameName);\n\n        //We then push the game name, image, URL, and key into an array, which is then used in setGameData.\n        return {\n          name: LSList[y][1],\n          image: imageURL,\n          url: linkData,\n          key: LSGame[0]\n        };\n      });\n      /*\r\n      for (var y = 0; y<localStorage.length-1; y++){\r\n        //Here, we set the game name, the data for our link/API call, and the key each game is associated with.\r\n        const firstString = LSList[y][1].toString();\r\n        const plusGameName = firstString.replace(/ /g, \"+\");\r\n        const linkData = `https://store.steampowered.com/search/?term=${plusGameName}`;\r\n          //Fetch the image from the API: if it finds an image, it's stored, otherwise, default image.\r\n        fetchImage(plusGameName);\r\n          \r\n        //We then push the game name, image, URL, and key into an array, which is then used in setGameData.\r\n        libraryGames.push({name: LSList[y][1], image: jsonData, url: linkData, key: LSList[y][0]});\r\n      }\r\n      */\n      const toSetGameData = await Promise.all(gamePromise);\n      setGameData(toSetGameData);\n    };\n    fetchGames();\n  }, []);\n\n  //This function handles the removal of a game, makeing sure to setGameData equal to all games\n  //except the game with the key we are removing.\n  const handleRemove = index => {\n    localStorage.removeItem(index);\n    console.log(\"Removed game was: \", index);\n    setGameData(prevGame => prevGame.filter(game => game.key !== index));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gameData.length > 0 ? gameData.map((game, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"InnerLibrary\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"LeftRow\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          id: \"gameImage\",\n          src: game.image,\n          onError: x => x.target.src = PCLogo,\n          alt: \"No Image...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: game.url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"gameURLs\",\n        children: game.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeGame\",\n        onClick: () => handleRemove(game.key)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"OuterLibrary\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No games are added to your library!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(SavedGames, \"PMC/s1JXWT/rpJfN4xe5+7xsq68=\");\n_c = SavedGames;\nexport default SavedGames;\nvar _c;\n$RefreshReg$(_c, \"SavedGames\");","map":{"version":3,"names":["React","useState","useEffect","PCLogo","axios","json","jsxDEV","_jsxDEV","SavedGames","_s","gameData","setGameData","jsonData","setJsonData","fetchImage","game","response","get","data","imageURL","items","link","console","log","error","fetchGames","x","LSList","localStorage","length","key","gameName","getItem","replace","push","sort","libraryGames","gamePromise","map","LSGame","index","firstString","toString","plusGameName","linkData","name","y","image","url","toSetGameData","Promise","all","handleRemove","removeItem","prevGame","filter","children","className","id","src","onError","target","alt","fileName","_jsxFileName","lineNumber","columnNumber","href","rel","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rfell/react-recommend-page/src/Library JS/SavedGames.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './LibraryCSS/Saved.css';\r\nimport PCLogo from './Images/PCLogoTest.png'\r\nimport axios from 'axios';\r\nimport { json } from 'react-router-dom';\r\n\r\n\r\n//This component returns all the games the user has saved to localStorage to respective HTML elements,\r\n//including the game name, steam search URL, image, and a button to remove the game.\r\nfunction SavedGames() {\r\n  const [gameData, setGameData] = useState([]);\r\n  const [jsonData, setJsonData] = useState([]);\r\n\r\n\r\n  //This function calls a google API to search for images of our requested game and return the image URL for us to use.\r\n  const fetchImage = async (game) => {\r\n    try{\r\n      //We make our API call to google, giving it our game name (formatted for URLs) and returning an image.\r\n      const response = await axios.get(`https://www.googleapis.com/customsearch/v1?key=AIzaSyA8yVgNiwh3Mf7OCHvcrQPL4ocikLadk1Y&num=1&searchType=image&start=1&cx=74bd649225d0f43ba&exactTerms=${game}&fileType=.PNG&imgSize=medium&alt=json`)\r\n      const data = response.data;\r\n      const imageURL = data.items[0].link;\r\n\r\n      console.log(\"The image URL is: \", imageURL);\r\n\r\n      return imageURL;\r\n    }\r\n    catch(error){\r\n      console.error(\"Couldn't retrieve the image...\");\r\n      return PCLogo;\r\n    }\r\n  }\r\n\r\n\r\n  //Using a useEffect to continuously load data from local storage and outputing that as our library data.\r\n  useEffect(() => {\r\n    const fetchGames = async () => {\r\n      var x = 0;\r\n      const LSList = [];\r\n      \r\n      //Here, we sort all the games in localStorage into an array.\r\n      while (x<localStorage.length){\r\n        localStorage.key(x)\r\n        const gameName = localStorage.getItem(localStorage.key(x)).replace(/\"/g, '');\r\n        LSList.push([localStorage.key(x), gameName])\r\n        x = x+1;\r\n      }\r\n      LSList.sort();\r\n\r\n      //The sorted list is used to retrieve the games in numeric key order and therefore output them in order.\r\n      const libraryGames = [];\r\n\r\n      const gamePromise = LSList.map(async(LSGame, index) => {\r\n        //Here, we set the game name, the data for our link/API call, and the key each game is associated with.\r\n        const firstString = LSGame[0].toString();\r\n        const plusGameName = firstString.replace(/ /g, \"+\");\r\n        const linkData = `https://store.steampowered.com/search/?term=${plusGameName}`;\r\n\r\n        //Fetch the image from the API: if it finds an image, it's stored, otherwise, default image.\r\n        const imageURL = await fetchImage(plusGameName);\r\n          \r\n        //We then push the game name, image, URL, and key into an array, which is then used in setGameData.\r\n        return {name: LSList[y][1], image: imageURL, url: linkData, key: LSGame[0]};\r\n      })\r\n      /*\r\n      for (var y = 0; y<localStorage.length-1; y++){\r\n        //Here, we set the game name, the data for our link/API call, and the key each game is associated with.\r\n        const firstString = LSList[y][1].toString();\r\n        const plusGameName = firstString.replace(/ /g, \"+\");\r\n        const linkData = `https://store.steampowered.com/search/?term=${plusGameName}`;\r\n\r\n        //Fetch the image from the API: if it finds an image, it's stored, otherwise, default image.\r\n        fetchImage(plusGameName);\r\n          \r\n        //We then push the game name, image, URL, and key into an array, which is then used in setGameData.\r\n        libraryGames.push({name: LSList[y][1], image: jsonData, url: linkData, key: LSList[y][0]});\r\n      }\r\n      */\r\n      const toSetGameData = await Promise.all(gamePromise);\r\n\r\n      setGameData(toSetGameData);\r\n    }\r\n\r\n    fetchGames();\r\n  }, []);\r\n\r\n  //This function handles the removal of a game, makeing sure to setGameData equal to all games\r\n  //except the game with the key we are removing.\r\n  const handleRemove = (index) => {\r\n    localStorage.removeItem(index);\r\n    console.log(\"Removed game was: \", index);\r\n    setGameData((prevGame) => prevGame.filter((game) => game.key !== index));\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      {gameData.length > 0 ? (\r\n        gameData.map((game, index) => (\r\n          <div key={index} className='InnerLibrary'>\r\n            <div className='LeftRow'>\r\n              <img id=\"gameImage\" src={game.image} onError={(x) => x.target.src = PCLogo} alt=\"No Image...\"></img>\r\n            </div>\r\n            <a href={game.url} target=\"_blank\" rel=\"noopener noreferrer\" className='gameURLs'>\r\n              {game.name}\r\n            </a>\r\n            <button id=\"removeGame\" onClick = {() => handleRemove(game.key)} />\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <div className='OuterLibrary'>\r\n          <p>No games are added to your library!</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SavedGames;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}