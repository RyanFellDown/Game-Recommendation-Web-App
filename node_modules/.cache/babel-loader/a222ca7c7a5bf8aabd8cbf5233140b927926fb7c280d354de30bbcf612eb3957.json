{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rfell\\\\react-recommend-page\\\\src\\\\Library JS\\\\SavedGames.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './LibraryCSS/Saved.css';\nimport PCLogo from './Images/PCLogoTest.png';\nimport axios from 'axios';\nimport { json } from 'react-router-dom';\n\n//This component returns all the games the user has saved to localStorage to respective HTML elements,\n//including the game name, steam search URL, image, and a button to remove the game.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SavedGames() {\n  _s();\n  const [gameData, setGameData] = useState([]);\n  const [jsonData, setJsonData] = useState([]);\n\n  //Using a useEffect to continuously load data from local storage and outputing that as our library data.\n  useEffect(() => {\n    var x = 0;\n    const LSList = [];\n\n    //Here, we sort all the games in localStorage into an array.\n    while (x < localStorage.length) {\n      localStorage.key(x);\n      const gameName = localStorage.getItem(localStorage.key(x)).replace(/\"/g, '');\n      LSList.push([localStorage.key(x), gameName]);\n      x = x + 1;\n    }\n    LSList.sort();\n\n    //The sorted list is used to retrieve the games in numeric key order and therefore output them in order.\n    const libraryGames = [];\n    for (var y = 0; y < localStorage.length - 1; y++) {\n      //Here, we set the game name, the data for our link/API call, and the key each game is associated with.\n      const firstString = LSList[y][1].toString();\n      const plusGameName = firstString.replace(/ /g, \"+\");\n      const linkData = `https://store.steampowered.com/search/?term=${plusGameName}`;\n      console.log(LSList[y][0]);\n\n      //Fetch the image from the API: if it finds an image, it's stored, otherwise, default image.\n      const imageData = fetchImage(plusGameName);\n\n      //We then push the game name, image, URL, and key into an array, which is then used in setGameData.\n      libraryGames.push({\n        name: LSList[y][1],\n        image: imageData,\n        url: linkData,\n        key: LSList[y][0]\n      });\n    }\n    setGameData(libraryGames);\n  }, []);\n\n  //This function handles the removal of a game, makeing sure to setGameData equal to all games\n  //except the game with the key we are removing.\n  const handleRemove = index => {\n    localStorage.removeItem(index);\n    console.log(\"Removed game was: \", index);\n    setGameData(prevGame => prevGame.filter(game => game.key !== index));\n  };\n\n  //This function calls a google API to search for images of our requested game and return the image URL for us to use.\n  const fetchImage = async (game, id) => {\n    try {\n      //We make our API call to google, giving it our game name (formatted for URLs) and returning an image.\n      const response = await axios.get(`https://www.googleapis.com/customsearch/v1?key=AIzaSyB-K3GnZU_CGPH9ICDkCRjzXYV44WXbEQM&num=1&searchType=image&start=1&cx=74bd649225d0f43ba&exactTerms=${game}&fileType=.PNG&imgSize=medium&alt=json`);\n      const data = response.data;\n      const imageURL = data.items[0].link;\n      console.log(\"The image data is: \", data);\n      console.log(\"The image URL is: \", imageURL);\n      return imageURL;\n      //setJsonData(...jsonData, {ID: id, imageLink: imageURL});\n    } catch (error) {\n      console.error(\"Couldn't retrieve the image...\");\n      //setJsonData(PCLogo)\n      return PCLogo;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gameData.length > 0 ? gameData.map((game, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"InnerLibrary\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"LeftRow\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          id: \"gameImage\",\n          src: game.image,\n          onError: x => x.target.src = PCLogo,\n          alt: \"No Image...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: game.url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        className: \"gameURLs\",\n        children: game.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"removeGame\",\n        onClick: () => handleRemove(game.key)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"OuterLibrary\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No games are added to your library!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(SavedGames, \"PMC/s1JXWT/rpJfN4xe5+7xsq68=\");\n_c = SavedGames;\nexport default SavedGames;\nvar _c;\n$RefreshReg$(_c, \"SavedGames\");","map":{"version":3,"names":["React","useState","useEffect","PCLogo","axios","json","jsxDEV","_jsxDEV","SavedGames","_s","gameData","setGameData","jsonData","setJsonData","x","LSList","localStorage","length","key","gameName","getItem","replace","push","sort","libraryGames","y","firstString","toString","plusGameName","linkData","console","log","imageData","fetchImage","name","image","url","handleRemove","index","removeItem","prevGame","filter","game","id","response","get","data","imageURL","items","link","error","children","map","className","src","onError","target","alt","fileName","_jsxFileName","lineNumber","columnNumber","href","rel","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rfell/react-recommend-page/src/Library JS/SavedGames.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './LibraryCSS/Saved.css';\r\nimport PCLogo from './Images/PCLogoTest.png'\r\nimport axios from 'axios';\r\nimport { json } from 'react-router-dom';\r\n\r\n\r\n//This component returns all the games the user has saved to localStorage to respective HTML elements,\r\n//including the game name, steam search URL, image, and a button to remove the game.\r\nfunction SavedGames() {\r\n  const [gameData, setGameData] = useState([]);\r\n  const [jsonData, setJsonData] = useState([]);\r\n\r\n  //Using a useEffect to continuously load data from local storage and outputing that as our library data.\r\n  useEffect(() => { \r\n    var x = 0;\r\n    const LSList = [];\r\n    \r\n    //Here, we sort all the games in localStorage into an array.\r\n    while (x<localStorage.length){\r\n      localStorage.key(x)\r\n      const gameName = localStorage.getItem(localStorage.key(x)).replace(/\"/g, '');\r\n      LSList.push([localStorage.key(x), gameName])\r\n      x = x+1;\r\n    }\r\n    LSList.sort();\r\n\r\n    //The sorted list is used to retrieve the games in numeric key order and therefore output them in order.\r\n    const libraryGames = [];\r\n    for (var y = 0; y<localStorage.length-1; y++){\r\n      //Here, we set the game name, the data for our link/API call, and the key each game is associated with.\r\n      const firstString = LSList[y][1].toString();\r\n      const plusGameName = firstString.replace(/ /g, \"+\");\r\n      const linkData = `https://store.steampowered.com/search/?term=${plusGameName}`;\r\n      console.log(LSList[y][0])\r\n\r\n      //Fetch the image from the API: if it finds an image, it's stored, otherwise, default image.\r\n      const imageData = fetchImage(plusGameName);\r\n        \r\n      //We then push the game name, image, URL, and key into an array, which is then used in setGameData.\r\n      libraryGames.push({name: LSList[y][1], image: imageData, url: linkData, key: LSList[y][0]});\r\n    }\r\n\r\n    setGameData(libraryGames);\r\n  }, []);\r\n\r\n  //This function handles the removal of a game, makeing sure to setGameData equal to all games\r\n  //except the game with the key we are removing.\r\n  const handleRemove = (index) => {\r\n    localStorage.removeItem(index);\r\n    console.log(\"Removed game was: \", index);\r\n    setGameData((prevGame) => prevGame.filter((game) => game.key !== index));\r\n  }\r\n\r\n  //This function calls a google API to search for images of our requested game and return the image URL for us to use.\r\n  const fetchImage = async (game, id) => {\r\n    try{\r\n      //We make our API call to google, giving it our game name (formatted for URLs) and returning an image.\r\n      const response = await axios.get(`https://www.googleapis.com/customsearch/v1?key=AIzaSyB-K3GnZU_CGPH9ICDkCRjzXYV44WXbEQM&num=1&searchType=image&start=1&cx=74bd649225d0f43ba&exactTerms=${game}&fileType=.PNG&imgSize=medium&alt=json`)\r\n      const data = response.data;\r\n      const imageURL = data.items[0].link;\r\n\r\n      console.log(\"The image data is: \", data);\r\n      console.log(\"The image URL is: \", imageURL);\r\n      return (imageURL);\r\n      //setJsonData(...jsonData, {ID: id, imageLink: imageURL});\r\n    }\r\n    catch(error){\r\n      console.error(\"Couldn't retrieve the image...\");\r\n      //setJsonData(PCLogo)\r\n      return (PCLogo);\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      {gameData.length > 0 ? (\r\n        gameData.map((game, index) => (\r\n          <div key={index} className='InnerLibrary'>\r\n            <div className='LeftRow'>\r\n              <img id=\"gameImage\" src={game.image} onError={(x) => x.target.src = PCLogo} alt=\"No Image...\"></img>\r\n            </div>\r\n            <a href={game.url} target=\"_blank\" rel=\"noopener noreferrer\" className='gameURLs'>\r\n              {game.name}\r\n            </a>\r\n            <button id=\"removeGame\" onClick = {() => handleRemove(game.key)} />\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <div className='OuterLibrary'>\r\n          <p>No games are added to your library!</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SavedGames;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}